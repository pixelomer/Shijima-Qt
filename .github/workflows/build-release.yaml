name: Build release

on: [workflow_dispatch]

jobs:
  build-windows:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Fetch full history for Shijima submodules
        env:
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        run: |
          git fetch --unshallow origin $BRANCH_NAME
          pushd libshijima
          git fetch --unshallow origin main
          echo "libshijima: $(git rev-list HEAD --count) commits"
          popd
      - name: Cache Docker image
        id: cache-docker
        uses: actions/cache@v4
        with:
          path: shijima-qt-dev.tar.gz
          key: docker-fedora-42-qt6-mingw
      - name: Build Docker image
        if: steps.cache-docker.outputs.cache-hit != 'true'
        run: |
          pushd dev-docker
          docker build -t shijima-qt-dev .
          docker save shijima-qt-dev | gzip > ../shijima-qt-dev.tar.gz
          popd
      - name: Import Docker image
        if: steps.cache-docker.outputs.cache-hit == 'true'
        run: |
          gunzip -c < shijima-qt-dev.tar.gz | docker load
      - name: Build Windows x86_64 release build
        run: |
          docker run -e CONFIG=release --rm -v "$(pwd)":/work shijima-qt-dev bash -c \
            'mingw64-make clean && mingw64-make -j$(nproc) && cp -r licenses publish/Windows/release/'
      - name: Archive Windows x86_64 release build
        uses: actions/upload-artifact@v4
        with:
          name: release-windows-x86_64
          path: publish/Windows/release
          retention-days: 1
  build-linux:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ ubuntu-24.04-arm, ubuntu-22.04 ]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Fetch full history for Shijima submodules
        env:
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        run: |
          git fetch --unshallow origin $BRANCH_NAME
          pushd libshijima
          git fetch --unshallow origin main
          echo "libshijima: $(git rev-list HEAD --count) commits"
          popd
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install Qt6
        uses: jdpurcell/install-qt-action@v5
        with:
          use-naqt: true
          version: '6.8.2'
          host: ${{ (matrix.runner == 'ubuntu-24.04-arm') && 'linux_arm64' || 'linux' }}
          target: 'desktop'
          arch: ${{ (matrix.runner == 'ubuntu-24.04-arm') && 'linux_gcc_arm64' || 'linux_gcc_64' }}
          modules: 'qtmultimedia'
          cache: true
      - name: Install build dependencies
        run: |
          sudo apt-get install -y libxcb-cursor0 libarchive-dev libwayland-dev wayland-protocols
      - name: Install build dependencies (arm64)
        if: matrix.runner == 'ubuntu-24.04-arm'
        run: |
          sudo apt-get install -y libgstreamer-plugins-bad1.0-0 libgstreamer-plugins-good1.0-0
      - name: Build Linux release build
        env:
          CONFIG: release
        run: |
          make clean
          make -j$(nproc)
          make appimage
          cp -r licenses publish/Linux/release/
      - name: Archive Linux release build
        uses: actions/upload-artifact@v4
        with:
          name: ${{ (matrix.runner == 'ubuntu-24.04-arm') && 'release-linux-arm64' || 'release-linux-x86_64' }}
          path: publish/Linux/release
          retention-days: 1
  build-macos:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Fetch full history for Shijima submodules
        env:
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        run: |
          git fetch --unshallow origin $BRANCH_NAME
          pushd libshijima
          git fetch --unshallow origin main
          echo "libshijima: $(git rev-list HEAD --count) commits"
          popd
      - name: Temporarily let gtar run as root
        run: |
          sudo chown 0:0 /opt/homebrew/bin/gtar
          sudo chmod u+s /opt/homebrew/bin/gtar
      - name: Cache Qt6
        id: cache-qt6
        uses: actions/cache@v4
        with:
          path: /opt/local
          key: macos-14-macports-qt6
      - name: Revoke gtar's root permissions
        run: |
          sudo chmod u-s /opt/homebrew/bin/gtar
      - name: Install Qt6
        if: steps.cache-qt6.outputs.cache-hit != 'true'
        run: |
          wget --no-verbose https://github.com/macports/macports-base/releases/download/v2.10.5/MacPorts-2.10.5-14-Sonoma.pkg
          sudo installer -pkg MacPorts-2.10.5-14-Sonoma.pkg -target /
          export PATH=/opt/local/bin:/opt/local/sbin:$PATH
          yes | sudo port install qt6-qtbase qt6-qtmultimedia pkgconfig libarchive
          sudo rm -rf /opt/local/var/macports/build/*
          sudo rm -rf /opt/local/var/macports/distfiles/*
      - name: Expose MacPorts tools
        run: |
          echo "PATH=/opt/local/bin:/opt/local/sbin:$PATH" >> $GITHUB_ENV
      - name: Build macOS arm64 release build
        env:
          CONFIG: release
        run: |
          make clean
          make -j6
          make macapp
          cp -r licenses publish/macOS/release/
      - name: Archive macOS arm64 release build
        uses: actions/upload-artifact@v4
        with:
          name: release-macos-arm64
          path: publish/macOS/release
          retention-days: 1
      - name: Temporarily let gtar run as root
        run: |
          sudo chown 0:0 /opt/homebrew/bin/gtar
          sudo chmod u+s /opt/homebrew/bin/gtar
